package com.cart.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.cart.entity.Cart;
import com.cart.entity.CartItem;
import com.cart.entity.Crop;
import com.cart.entity.User;
import com.cart.exception.CartNotFoundException;
import com.cart.exception.CropNotFoundException;
import com.cart.exception.QuantityNotExistsException;
import com.cart.exception.UserNotFoundException;
import com.cart.repository.CartRepository;



@Service
public class CartServiceImpl implements ICartService{

       
  @Autowired
   CartRepository cartRepo;
  
  @Autowired
  RestTemplate restTemplate;
  
  
     
   String CROP_MICROSERVICE_URL = "http://CROP/crop/";
   String USER_MICROSERVICE_URL = "http://USERSERVICE/user/";

 
  
  public Cart addCart(CartItem cartitem, String userid, String cropid) {

		
	     Crop crop = restTemplate.getForObject(CROP_MICROSERVICE_URL + "getById/" + cropid, Crop.class);
		
	     
         User user = restTemplate.getForObject(USER_MICROSERVICE_URL + "getById/" + userid, User.class);

        

		Cart cart= cartRepo.findByUserid(userid);

		if(cart==null) {

			cart = new Cart();
			String cartid = UUID.randomUUID().toString();
			cart.setCartid(cartid);
			cart.setUserid(userid);
			cart.setCartItems(new ArrayList<CartItem>());
		}

		int quantityRequired = cartitem.getQuantity();
		double calculatedPrice = 0.0;

		

		int quantityAvailable = crop.getQuantity();
      if (quantityAvailable < quantityRequired) {
          throw new QuantityNotExistsException("Please check the quantity" + crop.getCropName() + "\nQuantity=" + quantityAvailable);

      } else {
      	calculatedPrice = crop.getPrice() * quantityRequired;
      }

     
      crop.setQuantity(quantityAvailable - quantityRequired);
      restTemplate.put(CROP_MICROSERVICE_URL + "/updateQuantity/" + cropid, crop);

		
		List<CartItem> cartItems = cart.getCartItems();
		cartitem.setCropid(cropid);
		cartitem.setCropName(crop.getCropName());
		cartitem.setTotalprice(calculatedPrice);
		cartItems.add(cartitem);

      cart.setCartItems(cartItems);
      cart.setTotalCost(calculateTotalCost(cart));

      cartRepo.save(cart);
      return cart;

		}
  
private double calculateTotalCost(Cart cart) {
	 double totalCost = 0.0;
     for (CartItem item : cart.getCartItems()) {
         totalCost += item.getTotalprice();
     }
     return totalCost;
}


@Override
public Cart updateCart(String id, Cart cart) {
	
	Optional<Cart> updatedcart = cartRepo.findById(id);
	if(updatedcart.isEmpty()) {
		throw new CartNotFoundException("Cart does not exists");
	}
	Cart c1 = updatedcart.get();
	c1.setCartItems(cart.getCartItems());
	c1.setTotalCost(calculateTotalCost(cart));
	cartRepo.save(c1);
	return c1;
}



@Override
public String deleteCart(String id) {
	
	Optional<Cart> c = cartRepo.findById(id);
	if(c.isEmpty()) {
		throw new UserNotFoundException("Cart does not exists");
	}
	
	cartRepo.deleteById(id);
	return "Cart successfully deleted";
}


@Override
public Cart getCartByUserId(String userid) {
    Cart cart = cartRepo.findByUserid(userid);
    if (cart == null) {
        throw new UserNotFoundException("Cart not found for userid: " + userid);
    }
    return cart;
}

@Override
public Cart getCartId(String cartid) {
    Optional<Cart> cartOptional = cartRepo.findById(cartid);
    if (!cartOptional.isPresent()) {
        throw new CartNotFoundException("Cart not found for cartid: " + cartid);
    }
    return cartOptional.get();
}

@Override
public void removeCartItem(String cartId, String cropId) {
	 Optional<Cart> optionalCart = cartRepo.findById(cartId);
     if (optionalCart.isPresent()) {
         Cart cart = optionalCart.get();
         cart.getCartItems().removeIf(cartItem -> cartItem.getCropid().equals(cropId));
         cartRepo.save(cart);
     }
 }


public Optional<Cart> checkoutCart(String cartId, Cart updatedCart) {
    Optional<Cart> existingCart = cartRepo.findById(cartId);

    if (existingCart.isPresent()) {
        Cart cart = existingCart.get();
        cart.setTotalCost(updatedCart.getTotalCost());
        cart.setCartItems(updatedCart.getCartItems());
        cartRepo.save(cart);
    } else {
        throw new CartNotFoundException("Cart not found with ID: " + cartId);
    }

    return existingCart;
}








}




      
 











 


//private Crop getCropDetails(String cropName) {
//String url = CROP_MICROSERVICE_URL + "getbyname/" + cropName;
//System.out.println("Request URL: " + url);
//
//try {
//    ResponseEntity<Crop> response = restTemplate.getForEntity(url, Crop.class);
//    Crop crop = response.getBody();
//    System.out.println("Response: " + crop);
//    return crop;
//} catch (HttpClientErrorException e) {
//    System.out.println("Error Response: " + e.getResponseBodyAsString());
//    throw e;
//}
//}

//public Cart getCartByUserId(Long userid) {
//return cartRepo.findByUserid(userid)
//      .orElseThrow(() -> new CartNotFoundException("Cart not found for userid: " + userid));
//}

//addcart

//for (CartItem cartItem : cart.getCartItems()) {
//if (!cropExists(cartItem.getCropName())) {
//  log.error("crop not in list");
//  throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Crop not found: " + cartItem.getCropName());
//  }
//}
//
//cart.setTotalCost(totalCost);
//Cart savedCart = cartRepo.save(cart);
//
//return savedCart;

 

//@Override
//public Cart addCart(Cart cart) { 
//	 double totalCost = calculateTotalCost(cart.getCartItems());
//	    cart.setTotalCost(totalCost);
//	    Cart savedCart = cartRepo.save(cart);
//
//	    return savedCart; 
//}
 


//@Override
//public Cart getCartById(String cartid) {
//	Cart cart1 = cartRepo.findByCartid(cartid);
//
//  if (cart1 != null) {
//      return cart1;
//  }
//
//  String url = CROP_MICROSERVICE_URL + "/cart/" + cartid;
//  ResponseEntity<Cart> response = restTemplate.getForEntity(url, Cart.class);
//  Cart cart2 = response.getBody();
//
//  if (cart2 != null) {
//      cartRepo.save(cart2);
//  }
//
//  return cart2;
//}

//@Override
//public Cart getCartById(String id) {
//	
//	
//Optional<Cart> c2=cartRepo.findById(id);
//	if(c2.isPresent()) {
//		log.info("cart is present");
//		return c2.get();
//		
//	}
//	else {
//		throw new CartNotFoundException("Cart with "+id+" not found");
//	}
//	
//	
////	 return cartRepo.findById(id).orElseThrow(() -> new CartNotFoundException("Cart with "+id+" not found"));
//	
//	
//}

//@Override
//public List<Cart> getAllCarts(){
//	List<Cart> cart=cartRepo.findAll();
//	System.out.println("Getting data from"+cart);
//	return cart;
//}

//addcart

//      if (!userExists(userid)) {
//  throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found: " + userid);
//}
//
//Cart existingCart = cartRepo.findByUserid(userid)
//      .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cart not found for userid: " + userid));
//
//for (CartItem newItem : newItems) {
//  if (!cropExists(newItem.getCropName())) {
//      throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Crop not found: " + newItem.getCropName());
//  }
//}
//
//existingCart.getCartItems().addAll(newItems);
//
//double totalCost = calculateTotalCost(existingCart.getCartItems());
//existingCart.setTotalCost(totalCost);
//
//return cartRepo.save(existingCart);
//}









//  public Cart addCart(Long userid, Cart cart) {
//    double totalCost = 0.0;
//
//    if (!userExists(userid)) {
//        throw new DealerNotFoundException("User not found: " + userid);
//    }
//
//    for (CartItem cartItem : cart.getCartItems()) {
//        String cropName = cartItem.getCropName();
//        int quantity = cartItem.getQuantity();
//
//        Crop crop = getCropDetails(cropName);
//
//        if (crop == null) {
//            throw new CropNotFoundException("Crop not found for " + cropName);
//        }
//
//        double price = crop.getPrice();
//        cartItem.setPrice(price);
//
//        totalCost += price * quantity;
//    }
//
//    cart.setTotalCost(totalCost);
//    cart.setUserid(userid);
//    Cart savedCart = cartRepo.save(cart);
//
//    return savedCart;
//
//}
//public Cart addCart(Long userid,Cart cart){
//  
//  double totalCost = calculateTotalCost(cart.getCartItems());
//  if (!userExists(userid)) {
//	   
//	    throw new DealerNotFoundException("User not found: ");
//	}
//
//	for (CartItem cartItem : cart.getCartItems()) {
//	    if (!cropExists(cartItem.getCropName())) {
//	       
//	        throw new  CropNotFoundException("Crop not found for  " + cartItem.getCropName());
//	    }
//	}
//
//	cart.setTotalCost(totalCost);
//	cart.setUserid(userid);
//	Cart savedCart = cartRepo.save(cart);
//
//	return savedCart;
//
//}